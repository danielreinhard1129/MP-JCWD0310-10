// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  publishDate DateTime @default(now())
  limit       Int
  location    String
  description String
  image       String
  startDate   DateTime
  endDate     DateTime
  booked      Boolean

  ticket       Ticket[]
  review       Review[]
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int

  Category Category?

  @@map("events")
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int      @unique

  @@map("categories")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String
  email        String
  password     String
  referralCode String       @unique
  role         String
  isVerified   Boolean
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  review       Review[]
  point        Point?
  transaction  Transaction?
  Event        Event[]
  rewards      Rewards?

  @@map("users")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  total         Int
  status        String
  paymentDetail String
  referalUsed   String
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  Point         Point?   @relation(fields: [pointId], references: [id])
  pointId       Int?     @unique
  voucher       Voucher? @relation(fields: [voucherId], references: [id])
  voucherId     Int?     @unique
  event         Event?   @relation(fields: [eventId], references: [id])
  eventId       Int?
  rewards       Rewards? @relation(fields: [rewardsId], references: [id])
  rewardsId     Int?

  @@map("transactions")
}

model Ticket {
  id          Int    @id @default(autoincrement())
  ticketType  String
  price       Int
  seats       Int
  description String
  eventId     Int
  event       Event  @relation(fields: [eventId], references: [id])

  @@map("tickets")
}

model Point {
  id          Int          @id @default(autoincrement())
  point       Int
  expiredDate DateTime     @updatedAt
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction?

  @@map("points")
}

// add rewards
model Rewards {
  id      Int   @id @default(autoincrement())
  rewards Float
  user    User  @relation(fields: [userId], references: [id])
  userId  Int   @unique

  expiredDate DateTime      @updatedAt
  Transaction Transaction[]

  @@map("rewards")
}

model Voucher {
  id             Int          @id @default(autoincrement())
  name           String
  totalDiscount  Int
  aviableVoucher Int
  startDate      DateTime
  expiredDate    DateTime     @updatedAt
  Transaction    Transaction?

  @@map("vouchers")
}

model Review {
  // id      Int      @id @default(autoincrement())
  rating  Int
  comment String
  date    DateTime @default(now())
  events  Event    @relation(fields: [eventId], references: [id])
  eventId Int
  users   User     @relation(fields: [userId], references: [id])
  userId  Int

  @@id([eventId, userId])
  @@map("reviews")
}
